import React, { useState, useEffect } from "react";import axios from "axios";import Sidebar from "../components/Sidebar";const ManageCampaigns = () => {  const [campaigns, setCampaigns] = useState([]); // List of campaigns  const [formData, setFormData] = useState({ name: "", description: "", status: "", priority: "", start_date: "", end_date: "" }); // Form data  const [isEditing, setIsEditing] = useState(false); // Track if editing  const [editId, setEditId] = useState(null); // Track the campaign being edited  // Fetch campaigns on component mount  useEffect(() => {    fetchCampaigns();  }, []);  // Fetch all campaigns  const fetchCampaigns = async () => {    try {      const response = await axios.get("/api/campaigns");      setCampaigns(response.data.data); // Assuming the API response contains campaigns in `data.data`    } catch (error) {      console.error("Error fetching campaigns:", error);    }  };  // Handle form input changes  const handleInputChange = (e) => {    const { name, value } = e.target;    setFormData({ ...formData, [name]: value });  };  // Add a new campaign  const handleAddCampaign = async () => {    if (!formData.name || !formData.description || !formData.status || !formData.priority || !formData.start_date) {      alert("Please fill in all required fields.");      return;    }    try {      await axios.post("/api/campaigns", formData);      fetchCampaigns(); // Refresh the campaign list      setFormData({ name: "", description: "", status: "", priority: "", start_date: "", end_date: "" });    } catch (error) {      console.error("Error adding campaign:", error);    }  };  // Edit an existing campaign  const handleEditCampaign = (id) => {    const campaign = campaigns.find((c) => c.id === id);    setFormData({      name: campaign.name,      description: campaign.description,      status: campaign.status,      priority: campaign.priority,      start_date: campaign.start_date,      end_date: campaign.end_date,    });    setIsEditing(true);    setEditId(id);  };  // Update a campaign  const handleUpdateCampaign = async () => {    try {      await axios.put(`/api/campaigns/${editId}`, formData);      fetchCampaigns(); // Refresh the campaign list      setFormData({ name: "", description: "", status: "", priority: "", start_date: "", end_date: "" });      setIsEditing(false);